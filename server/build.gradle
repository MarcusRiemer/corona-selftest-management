plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'de.akra'
version = '0.0.4'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.session:spring-session:1.3.5.RELEASE'

    // Provides hot reload during development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Used to generate sort-of-valid looking data to play around
    implementation 'com.github.javafaker:javafaker:1.0.2'

    // Parsing CSV for batch uploads as its the easiest way to get data
    // out of Excel sheets
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.13.1'

    // We use a H2 database to make deployments as simple as possible
    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

// To make deployment as easy as possible (specifically: "Run this jar
// and be done"), the frontend application is compiled and placed in the
// jar.
task buildFrontend() {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        throw new GradleException('Sorry, automatic bundling is not supported on Windows')
    } else {
        def resDir = '../server/src/main/resources/static/'
        // Ensure that target directory exists
        exec { commandLine 'mkdir', '-p', resDir }

        // Just in case: Remove everything that was compiled before
        delete fileTree(resDir) {}

        exec {
            executable 'npm'
            args 'run-script', 'build'
            workingDir '../client'
        }
        copy {
            from '../client/dist/corona-school-reporting-client/'
            into resDir
        }

        assert file(resDir + 'index.html').exists()
    }
}

bootJar.dependsOn buildFrontend
